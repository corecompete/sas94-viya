{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "SAS Application Name": {
            "minLength": 2,
            "maxLength": 5,
            "type": "String",
            "metadata": {
                "description": "This tag will be used as a prefix for the hostname of the SAS servers and Azure resources"
            }
        },
        "Admin Ingress Location": {
            "type": "String",
            "metadata": {
                "description": "Allow inbound SSH traffic to the Ansible Controller-Bastion Host from this CIDR block or IP address range. Must be a valid IP or CIDR range of the form x.x.x.x or x.x.x.x/x"
            }
        },
        "Vnet Address CIDR": {
            "defaultValue": "10.10.0.0/16",
            "type": "String",
            "metadata": {
                "description": "Virtual Network CIDR, ex. 10.10.0.0/16"
            }
        },
        "Ansible-Bastion PublicSubnet CIDR": {
            "defaultValue": "10.10.1.0/24",
            "type": "String",
            "metadata": {
                "description": "Virtual Network Public Subnet CIDR, ex. 10.10.1.0/24 which should allign with VNET CIDR"
            }
        },
        "SAS94 PrivateSubnet CIDR": {
            "defaultValue": "10.10.2.0/24",
            "type": "String",
            "metadata": {
                "description": "Virtual Network Private Subnet CIDR, ex. 10.10.2.0/24 which should allign with VNET CIDR"
            }
        },
        "SAS94 Meta VM Size": {
            "defaultValue": "Standard_D4s_v3",
            "type": "String",
            "metadata": {
                "description": "This is the SKU for the Meta VM.The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks. For details: https://azure.microsoft.com/en-in/pricing/details/virtual-machines/red-hat/"
            }
        },
        "SAS94 Compute VM Size": {
            "defaultValue": "Standard_E8s_v3",
            "type": "String",
            "metadata": {
                "description": "This is the SKU for the Compute VM.The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks. For details: https://azure.microsoft.com/en-in/pricing/details/virtual-machines/red-hat/"
            }
        },
        "SAS94 Mid VM Size": {
            "defaultValue": "Standard_E8s_v3",
            "type": "String",
            "metadata": {
                "description": "This is the SKU for the Mid VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks. For details: https://azure.microsoft.com/en-in/pricing/details/virtual-machines/red-hat/"
            }
        },
        "SAS94 Data Storage": {
            "defaultValue": 100,
            "minValue": 100,
            "maxValue": 32767,
            "type": "Int",
            "metadata": {
                "description": "The SAS data volume size for SAS 94"
            }
        },
        "SAS External Password": {
            "minLength": 12,
            "maxLength": 16,
            "type": "SecureString",
            "metadata": {
                "description": "Password for RDP login & SAS admin account in SAS servers"
            }
        },
        "SAS Internal Password": {
            "minLength": 8,
            "maxLength": 16,
            "type": "SecureString",
            "metadata": {
                "description": "Password for SAS Internal Accounts(Metadata & WIP)"
            }
        },
        "Viya PrivateSubnet CIDR": {
            "defaultValue": "10.10.3.0/24",
            "type": "String",
            "metadata": {
                "description": "Virtual Network Private Subnet CIDR, ex. 10.10.3.0/24 which should allign with VNET CIDR"
            }
        },
        "Viya Microservices VM Size": {
            "defaultValue": "Standard_E16s_v3",
            "type": "String",
            "metadata": {
                "description": "This is the SKU for the MicroServices VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks. For details: https://azure.microsoft.com/en-in/pricing/details/virtual-machines/red-hat/"
            }
        },
        "Viya SPRE VM Size": {
            "defaultValue": "Standard_F8s_v3",
            "type": "String",
            "metadata": {
                "description": "This is the SKU for the SPRE VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks. For details: https://azure.microsoft.com/en-in/pricing/details/virtual-machines/red-hat/"
            }
        },
        "Viya CAS Controller VM Size": {
            "defaultValue": "Standard_E8s_v3",
            "type": "String",
            "metadata": {
                "description": "This is the SKU for the CASController VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disk. For details: https://azure.microsoft.com/en-in/pricing/details/virtual-machines/red-hat/"
            }
        },
        "Viya CAS Worker VM Size": {
            "defaultValue": "Standard_E8s_v3",
            "type": "String",
            "metadata": {
                "description": "This is the SKU for the CAS Worker VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks. For details: https://azure.microsoft.com/en-in/pricing/details/virtual-machines/red-hat/"
            }
        },
        "Number Of Viya CAS Nodes": {
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 100,
            "type": "Int",
            "metadata": {
                "description": "The number of CAS Worker Nodes to create."
            }
        },
        "SAS Viya Data Storage": {
            "defaultValue": 100,
            "minValue": 100,
            "maxValue": 32767,
            "type": "Int",
            "metadata": {
                "description": "The SAS data volume size for SAS Viya."
            }
        },
        "Storage Account Name": {
            "type": "String",
            "metadata": {
                "description": "Storage Account Name where SAS Depot is located"
            }
        },
        "Storage Account Key": {
            "type": "SecureString",
            "metadata": {
                "description": "Storage Account Key"
            }
        }, 
        "File Share Name": {
            "type": "String",
            "metadata": {
                "description": "File Share Name where SASDepot is located"
            }
        },
        "SASDepot Folder": {
           "type": "String",
            "metadata": {
                "description": "Folder Name in Azure File share where SAS94 depot is located"
            }
        },
        "Viyarepo Folder": {
            "type": "String",
            "metadata": {
                "description": "Folder Name in Azure File share where SAS Viya Repo is located"
            }
        },
        "SAS Server license file": {
            "type": "String",
            "metadata": {
                "description": "Name of SAS Application Server License file.You will find this file inside the SAS Software Depot. It should be inside the folder sid_file."
            }
        },
        "KeyVault Owner ID": {
            "type": "String",
            "metadata": {
                "description": "Key Vault Owner Object ID,Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets. e.g.In Azure Cloud PowerShell type PS> Get-AzADUser -UserPrincipalName user@domain.com | grep Id"
            }
        },
        "SSHPublicKey": {
            "type": "String",
            "metadata": {
                "description": "The full ssh public key that will be added to the servers."
            }
        },
        "Location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Azure Resources location, where all the SAS 94 and Viya resources should be created. e.g. servers, disks, IP's etc."
            }
        },
        "_artifactsLocation": {
            "defaultValue": "https://raw.githubusercontent.com/corecompete/sas94ng-viya/develop/",
            "type": "String",
            "metadata": {
                "description": "For a standard deployment, keep the default.  The https URL to the base of the deployment files in Microsoft Azure. If a SAS key is needed, please do not include the SAS key in the URL. Instead, add the part after and include the question mark to the _artifactsLocationSasToken variable. ex. https://(STORAGE_ACCOUNT).file.core.windows.net/(SHARE_NAME)/(SUBDIRECTORY_NAME)/"
            }
        }
    },
    "variables": {
        "_artifactsLocationSasToken": "",
        "access_policy_template": "[concat(parameters('_artifactsLocation'),'nestedtemplates/access_policy.json', variables('_artifactsLocationSasToken'))]",
        "ansible_nw_interface": "[concat(parameters('SAS Application Name'),'_',variables('ansible_vm_name'),'_nic_',variables('resourceGroupUniqueString'))]",
        "ansible_nw_sg": "[concat(parameters('SAS Application Name'),'_',variables('ansible_vm_name'),'_nsg_',variables('resourceGroupUniqueString'))]",
        "ansible_pub_nw_interface": "[concat(parameters('SAS Application Name'),'_',variables('ansible_vm_name'),'_pub_nic_',variables('resourceGroupUniqueString'))]",
        "ansible_ssl_copy_sh": "[concat(parameters('_artifactsLocation'),'scripts/ansible_ssl.sh', variables('_artifactsLocationSasToken'))]",
        "ansible_startup_script_sh": "[concat(parameters('_artifactsLocation'),'scripts/ansible_setup.sh', variables('_artifactsLocationSasToken'))]",
        "ansible_vm_name": "ansible",
        "ansible_vm_size": "Standard_DS2_v2",
        "cascontroller_nw_interface": "[concat(parameters('SAS Application Name'),'_',variables('cascontroller_vm_name'),'_nic_',variables('resourceGroupUniqueString'))]",
        "cascontroller_nw_sg": "[concat(parameters('SAS Application Name'),'_',variables('cascontroller_vm_name'),'_nsg_',variables('resourceGroupUniqueString'))]",
        "cascontroller_vm_name": "cascontroller",
        "casworker_nw_sg": "[concat(parameters('SAS Application Name'),'_',variables('casworker_vm_name'),'_nsg_',variables('resourceGroupUniqueString'))]",
        "casworker_vm_name": "casworker",
        "certificatesPermissions": [
            "import",
            "get",
            "list"
        ],
        "compute_config_sh": "[concat(parameters('_artifactsLocation'),'scripts/compute_config.sh', variables('_artifactsLocationSasToken'))]",
        "compute_install_sh": "[concat(parameters('_artifactsLocation'),'scripts/compute_install.sh', variables('_artifactsLocationSasToken'))]",
        "compute_nw_interface": "[concat(parameters('SAS Application Name'),'_',variables('compute_vm_name'),'_nic_',variables('resourceGroupUniqueString'))]",
        "compute_nw_sg": "[concat(parameters('SAS Application Name'),'_',variables('compute_vm_name'),'_nsg_',variables('resourceGroupUniqueString'))]",
        "compute_vm_name": "compute",
        "custom_data_cas": "#cloud-config\n mounts:\n   - [ ephemeral0, /cascache]",
        "custom_data_sas": "#cloud-config\n mounts:\n   - [ ephemeral0, /saswork]",
        "diagnostic_storagegroup_name": "[toLower(concat(parameters('SAS Application Name'),'diag', variables('resourceGroupUniqueString')))]",
        "domain_name": "internal.cloudapp.net",
        "enabledForDeployment": true,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": false,
        "key_vault_name": "[concat(parameters('SAS Application Name'), 'kv-',variables('resourceGroupUniqueString'))]",
        "key_vault_secretname_pubkey": "ansible-pubkey",
        "key_vault_secretname_pvtkey": "ansible-pvtkey",
        "key_vault_secretname_sasext": "sasextpw",
        "key_vault_secretname_sasinst": "sasintpw",
        "key_vault_secretname_stgacc": "stgacckey",
        "keysPermissions": [
            "get",
            "list",
            "import"
        ],
        "linux_extension_template": "[concat(parameters('_artifactsLocation'),'nestedtemplates/vm_linux_extension.json', variables('_artifactsLocationSasToken'))]",
        "meta_config_sh": "[concat(parameters('_artifactsLocation'),'scripts/meta_config.sh', variables('_artifactsLocationSasToken'))]",
        "meta_install_sh": "[concat(parameters('_artifactsLocation'),'scripts/meta_install.sh', variables('_artifactsLocationSasToken'))]",
        "meta_nw_interface": "[concat(parameters('SAS Application Name'),'_',variables('meta_vm_name'),'_nic_',variables('resourceGroupUniqueString'))]",
        "meta_nw_sg": "[concat(parameters('SAS Application Name'),'_',variables('meta_vm_name'),'_nsg_',variables('resourceGroupUniqueString'))]",
        "meta_vm_name": "meta",
        "microservices_nw_interface": "[concat(parameters('SAS Application Name'),'_',variables('microservices_vm_name'),'_nic_',variables('resourceGroupUniqueString'))]",
        "microservices_nw_sg": "[concat(parameters('SAS Application Name'),'_',variables('microservices_vm_name'),'_nsg_',variables('resourceGroupUniqueString'))]",
        "microservices_vm_name": "microservices",
        "mid_config_sh": "[concat(parameters('_artifactsLocation'),'scripts/mid_config.sh', variables('_artifactsLocationSasToken'))]",
        "mid_install_sh": "[concat(parameters('_artifactsLocation'),'scripts/mid_install.sh', variables('_artifactsLocationSasToken'))]",
        "mid_nw_interface": "[concat(parameters('SAS Application Name'),'_',variables('mid_vm_name'),'_nic_',variables('resourceGroupUniqueString'))]",
        "mid_nw_sg": "[concat(parameters('SAS Application Name'),'_',variables('mid_vm_name'),'_nsg_',variables('resourceGroupUniqueString'))]",
        "mid_vm_name": "mid",
        "primary_user_name": "vmuser",
        "pub_sub_nw_sg": "[concat(parameters('SAS Application Name'), '_subnt_pub1_nsg_',variables('resourceGroupUniqueString'))]",
        "pvt_sub_nw_sg": "[concat(parameters('SAS Application Name'), '_subnt_pvt1_nsg_',variables('resourceGroupUniqueString'))]",
        "rdp_nw_interface": "[concat(parameters('SAS Application Name'),'_',variables('rdp_vm_name'),'_nic_',variables('resourceGroupUniqueString'))]",
        "rdp_nw_sg": "[concat(parameters('SAS Application Name'),'_',variables('rdp_vm_name'),'_nsg_',variables('resourceGroupUniqueString'))]",
        "rdp_os_version": "2012-R2-Datacenter",
        "rdp_vm_name": "rdp",
        "rdp_vm_size": "Standard_D8S_v3",
        "reader_role": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
        "resourceGroupUniqueString": "[uniqueString(resourceGroup().id)]",
        "role_assignment_template": "[concat(parameters('_artifactsLocation'),'nestedtemplates/role_assignments.json', variables('_artifactsLocationSasToken'))]",
        "sas_opt_sas_disk_size": 128,
        "sas_osdisk_size": 128,
        "sas_viya_backup_size": 100,
        "sasapp_startup_script_sh": "[concat(parameters('_artifactsLocation'),'scripts/sasapp_prereq.sh', variables('_artifactsLocationSasToken'))]",
        "sasclients_power_shell_script": "[concat(parameters('_artifactsLocation'),'scripts/sas_clients.ps1', variables('_artifactsLocationSasToken'))]",
        "secretsPermissions": [
            "get",
            "list",
            "set"
        ],
        "skuName": "standard",
        "spre_nw_interface": "[concat(parameters('SAS Application Name'),'_',variables('spre_vm_name'),'_nic_',variables('resourceGroupUniqueString'))]",
        "spre_nw_sg": "[concat(parameters('SAS Application Name'),'_',variables('spre_vm_name'),'_nsg_',variables('resourceGroupUniqueString'))]",
        "spre_vm_name": "spre",
        "tenantId": "[subscription().tenantId]",
        "viya_ark_sh": "[concat(parameters('_artifactsLocation'),'scripts/viya_ark.sh', variables('_artifactsLocationSasToken'))]",
        "viya_install_sh": "[concat(parameters('_artifactsLocation'),'scripts/viyainstall.sh', variables('_artifactsLocationSasToken'))]",
        "viya_startup_script_sh": "[concat(parameters('_artifactsLocation'),'scripts/viya_prereq.sh', variables('_artifactsLocationSasToken'))]",
        "vnet_name": "[concat(parameters('SAS Application Name'),'_vnet_',variables('resourceGroupUniqueString'))]",
        "vnet_pub_subnt": "[concat(parameters('SAS Application Name'),'_vnet_pub1_subnt_',variables('resourceGroupUniqueString'))]",
        "vnet_pvt_subnt": "[concat(parameters('SAS Application Name'), '_vnet_pvt1_subnt_',variables('resourceGroupUniqueString'))]",
        "vnet_viya_pvt_subnt": "[concat(parameters('SAS Application Name'), '_vnet_pvt2_subnt_',variables('resourceGroupUniqueString'))]",
        "windows_extension_template": "[concat(parameters('_artifactsLocation'),'nestedtemplates/vm_windows_extension.json', variables('_artifactsLocationSasToken'))]",
        "sas94vm_tags":{"Application":"[parameters('SAS Application Name')]","Component":"SAS94NonGrid"},
        "sasviyavm_tags":{"Application":"[parameters('SAS Application Name')]","Component":"SASViya"},
        "ppg_name": "[concat(parameters('SAS Application Name'),'_ppg_',variables('resourceGroupUniqueString'))]"
    },
    "resources": [
        {
            "apiVersion": "2019-12-01",
            "type": "Microsoft.Compute/proximityPlacementGroups",
            "name": "[variables('ppg_name')]",
            "location": "[parameters('location')]"
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-06-01",
            "name": "[variables('vnet_name')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups',variables('pub_sub_nw_sg'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups',variables('pvt_sub_nw_sg'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('Vnet Address CIDR')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('vnet_pvt_subnt')]",
                        "properties": {
                            "addressPrefix": "[parameters('SAS94 PrivateSubnet CIDR')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('pvt_sub_nw_sg'))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('vnet_viya_pvt_subnt')]",
                        "properties": {
                            "addressPrefix": "[parameters('Viya PrivateSubnet CIDR')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('pvt_sub_nw_sg'))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('vnet_pub_subnt')]",
                        "properties": {
                            "addressPrefix": "[parameters('Ansible-Bastion PublicSubnet CIDR')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('pub_sub_nw_sg'))]"
                            }
                        }
                    }
                ],
                "enableDdosProtection": false,
                "enableVmProtection": false
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "[variables('pub_sub_nw_sg')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "allow-ssh",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "[parameters('Admin Ingress Location')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    }
                ],
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80,443",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "[variables('pvt_sub_nw_sg')]",
            "location": "[parameters('location')]",
            "properties": {
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80,443",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "name": "[variables('key_vault_name')]",
            "location": "[parameters('location')]",
            "properties": {
                "enabledForDeployment": "[variables('enabledForDeployment')]",
                "enabledForDiskEncryption": "[variables('enabledForDiskEncryption')]",
                "enabledForTemplateDeployment": "[variables('enabledForTemplateDeployment')]",
                "enableSoftDelete": "[variables('enableSoftDelete')]",
                "tenantId": "[variables('tenantId')]",
                "accessPolicies": [
                    {
                        "objectId": "[parameters('KeyVault Owner ID')]",
                        "tenantId": "[variables('tenantId')]",
                        "permissions": {
                            "keys": "[variables('keysPermissions')]",
                            "secrets": "[variables('secretsPermissions')]"
                        }
                    }
                ],
                "sku": {
                    "name": "[variables('skuName')]",
                    "family": "A"
                },
                "networkAcls": {
                    "defaultAction": "Allow",
                    "bypass": "AzureServices"
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2019-09-01",
            "name": "[concat(variables('key_vault_name'), '/', variables('key_vault_secretname_sasinst'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name'))]"
            ],
            "properties": {
                "value": "[parameters('SAS Internal Password')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2019-09-01",
            "name": "[concat(variables('key_vault_name'), '/', variables('key_vault_secretname_sasext'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name'))]"
            ],
            "properties": {
                "value": "[parameters('SAS External Password')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2019-09-01",
            "name": "[concat(variables('key_vault_name'), '/', variables('key_vault_secretname_stgacc'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name'))]"
            ],
            "properties": {
                "value": "[parameters('storage account key')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-04-01",
            "name": "[variables('diagnostic_storagegroup_name')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": false,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "[variables('ansible_nw_sg')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "allow-ssh",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "[parameters('Admin Ingress Location')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    }
                ],
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80,443",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "[variables('meta_nw_sg')]",
            "location": "[parameters('location')]",
            "properties": {
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to the Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "[variables('mid_nw_sg')]",
            "location": "[parameters('location')]",
            "properties": {
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to the Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "[variables('compute_nw_sg')]",
            "location": "[parameters('location')]",
            "properties": {
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to the Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "[variables('rdp_nw_sg')]",
            "location": "[parameters('location')]",
            "properties": {
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to the Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "[variables('microservices_nw_sg')]",
            "location": "[parameters('location')]",
            "properties": {
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to the Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "[variables('spre_nw_sg')]",
            "location": "[parameters('location')]",
            "properties": {
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to the Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "[variables('cascontroller_nw_sg')]",
            "location": "[parameters('location')]",
            "properties": {
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to the Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-09-01",
            "name": "[variables('casworker_nw_sg')]",
            "location": "[parameters('location')]",
            "properties": {
                "defaultSecurityRules": [
                    {
                        "name": "AllowVnetInBound",
                        "properties": {
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowVnetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 65000,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowInternetOutBound",
                        "properties": {
                            "description": "Allow outbound traffic from all VMs to the Internet",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 65001,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "description": "Deny all outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 65500,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2019-09-01",
            "name": "[variables('ansible_pub_nw_interface')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Basic",
                "tier": "Regional"
            },
            "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "name": "[variables('ansible_nw_interface')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('ansible_pub_nw_interface'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('ansible_nw_sg'))]",
                "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('ansible_pub_nw_interface'))]"
                            },
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet_name'), variables('vnet_pub_subnt'))]"
                            },
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "enableAcceleratedNetworking": true,
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('ansible_nw_sg'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "[variables('ansible_vm_name')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('ansible_nw_interface'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnostic_storagegroup_name'))]",
                "[resourceId('Microsoft.KeyVault/vaults',variables('key_vault_name'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('ansible_vm_size')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "RedHat",
                        "offer": "RHEL",
                        "sku": "7.7",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "[concat(variables('ansible_vm_name'),'-osdisk')]",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "diskSizeGB": 64
                    },
                    "dataDisks": [
                        {
                            "name": "[concat(variables('ansible_vm_name'),'-playbook')]",
                            "diskSizeGB": 50,
                            "lun": 0,
                            "createOption": "Empty"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('ansible_vm_name')]",
                    "adminUsername": "[variables('primary_user_name')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', variables('primary_user_name'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('SSHPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('ansible_nw_interface'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
                    }
                },
                "proximityPlacementGroup": {
                    "id": "[resourceId('Microsoft.Compute/proximityPlacementGroups',variables('ppg_name'))]"
                }
            },
            "resources": []
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "AnsibleRoleAssignment",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('ansible_vm_name'))]",
                "[resourceId('Microsoft.Resources/deployments','AnsibleAccessPolicy')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('role_assignment_template')]"
                },
                "parameters": {
                    "roleAssignmentName": {
                        "value": "[guid(variables('ansible_vm_name'),resourceGroup().id)]"
                    },
                    "roleDefinitionID": {
                        "value": "[variables('reader_role')]"
                    },
                    "principalId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('ansible_vm_name')),'2019-07-01','Full').identity.principalId]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "AnsibleAccessPolicy",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('ansible_vm_name'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('access_policy_template')]"
                },
                "parameters": {
                    "keyVaultName": {
                        "value": "[variables('key_vault_name')]"
                    },
                    "tenantId": {
                        "value": "[variables('tenantId')]"
                    },
                    "objectId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('ansible_vm_name')),'2019-12-01', 'Full').identity.principalId]"
                    },
                    "secretsPermissions": {
                        "value": "[variables('secretsPermissions')]"
                    },
                    "keysPermissions": {
                        "value": "[variables('keysPermissions')]"
                    },
                    "certificatesPermissions": {
                        "value": "[variables('certificatesPermissions')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase1-AnsibleHostSetup",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('ansible_vm_name'))]",
                "[resourceId('Microsoft.Resources/deployments','AnsibleAccessPolicy')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('ansible_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./ansible_setup.sh',' ',parameters('storage account name'),' ',parameters('file share name'),' ',parameters('viyarepo folder'),' ',parameters('SAS Application Name'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('Number Of Viya CAS Nodes'),' ',variables('mid_vm_name'),' ',parameters('_artifactsLocation'),' ',variables('compute_vm_name'),' ',variables('meta_vm_name'),' ',variables('key_vault_secretname_stgacc'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('ansible_startup_script_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase2-AnsibleSSLCopy",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', 'Ansible')]",
                "[resourceId('Microsoft.Resources/deployments','Phase2-MetaInstall')]",
                "[resourceId('Microsoft.Resources/deployments','Phase2-MidInstall')]",
                "[resourceId('Microsoft.Resources/deployments','Phase2-ComputeInstall')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "Ansible"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail;./ansible_ssl.sh 2>&1 | tee /var/log/sas/install/runPhase2AnsibleSSLCopy.log;')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('ansible_ssl_copy_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase3-ViyaInstallpart1",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'Phase1-AnsibleHostSetup')]",
                "[resourceId('Microsoft.Resources/deployments', 'Phase2-MicroServicesViyaARK')]",
                "[resourceId('Microsoft.Resources/deployments', 'Phase2-SpreViyaARK')]",
                "[resourceId('Microsoft.Resources/deployments', 'Phase2-CASControllerViyaARK')]",
                "casworkerviyaarkcopy"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('ansible_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail;','./viyainstall.sh',' ', '1',' ','2>&1 | tee /var/log/sas/install/runPhase3_viyainstallpart1.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('viya_install_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase4-ViyaInstallpart2",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'Phase3-ViyaInstallpart1')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('ansible_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail;','./viyainstall.sh',' ', '2',' ','2>&1 | tee /var/log/sas/install/runPhase4_viyainstallpart2.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('viya_install_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase5-ViyaInstallpart3",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'Phase4-ViyaInstallpart2')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('ansible_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail;','./viyainstall.sh',' ', '3',' ','2>&1 | tee /var/log/sas/install/runPhase5_viyainstallpart3.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('viya_install_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase6-ViyaPostInstall",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'Phase5-ViyaInstallpart3')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('ansible_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail;','./viyainstall.sh',' ', '4',' ','2>&1 | tee /var/log/sas/install/runPhase6_viyapostinstall.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('viya_install_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "name": "[variables('rdp_nw_interface')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('rdp_nw_sg'))]",
                "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet_name'), variables('vnet_pvt_subnt'))]"
                            },
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "enableAcceleratedNetworking": true,
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('rdp_nw_sg'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "[variables('rdp_vm_name')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('rdp_nw_interface'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnostic_storagegroup_name'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('rdp_vm_size')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftWindowsServer",
                        "offer": "WindowsServer",
                        "sku": "[variables('rdp_os_version')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    }
                },
                "osProfile": {
                    "computerName": "[variables('rdp_vm_name')]",
                    "adminUsername": "[variables('primary_user_name')]",
                    "adminPassword": "[parameters('SAS External Password')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('rdp_nw_interface'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
                    }
                },
                "proximityPlacementGroup": {
                    "id": "[resourceId('Microsoft.Compute/proximityPlacementGroups',variables('ppg_name'))]"
                }
            },
            "resources": []
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase1-SASClientInstall",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('rdp_vm_name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('windows_extension_template')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('rdp_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('powershell -ExecutionPolicy Unrestricted -File sas_clients.ps1 ','-stg_acc_name ',parameters('storage account name'),' -stg_key ',parameters('storage account key'),' -file_share_name ',parameters('file share name'),' -depot_folder_name ',parameters('sasdepot folder'),' -clients_sid ',parameters('SAS Server license file'),' -app_name ',parameters('SAS Application Name'),' -mid_name ',variables('mid_vm_name'),' -domain_name ',variables('domain_name'),' -artifact_loc ',parameters('_artifactsLocation'))]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('sasclients_power_shell_script')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "name": "[variables('meta_nw_interface')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('meta_nw_sg'))]",
                "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet_name'), variables('vnet_pvt_subnt'))]"
                            },
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "enableAcceleratedNetworking": true,
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('meta_nw_sg'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "[variables('meta_vm_name')]",
            "location": "[parameters('location')]",
            "tags":"[variables('sas94vm_tags')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('meta_nw_interface'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnostic_storagegroup_name'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('SAS94 Meta VM Size')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "RedHat",
                        "offer": "RHEL",
                        "sku": "7.7",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "[concat(variables('meta_vm_name'),'-osdisk')]",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "diskSizeGB": "[variables('sas_osdisk_size')]"
                    },
                    "dataDisks": [
                        {
                            "name": "[concat(variables('meta_vm_name'),'-opt-sas')]",
                            "diskSizeGB": "[variables('sas_opt_sas_disk_size')]",
                            "lun": 0,
                            "createOption": "Empty"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('meta_vm_name')]",
                    "adminUsername": "[variables('primary_user_name')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', variables('primary_user_name'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('SSHPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('meta_nw_interface'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
                    }
                },
                "proximityPlacementGroup": {
                    "id": "[resourceId('Microsoft.Compute/proximityPlacementGroups',variables('ppg_name'))]"
                }
            },
            "resources": []
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "MetaRoleAssignment",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('meta_vm_name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('role_assignment_template')]"
                },
                "parameters": {
                    "roleAssignmentName": {
                        "value": "[guid('meta',resourceGroup().id)]"
                    },
                    "roleDefinitionID": {
                        "value": "[variables('reader_role')]"
                    },
                    "principalId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('meta_vm_name')),'2019-07-01','Full').identity.principalId]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "MetaAccessPolicy",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('meta_vm_name'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('access_policy_template')]"
                },
                "parameters": {
                    "keyVaultName": {
                        "value": "[variables('key_vault_name')]"
                    },
                    "tenantId": {
                        "value": "[variables('tenantId')]"
                    },
                    "objectId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('meta_vm_name')),'2019-12-01', 'Full').identity.principalId]"
                    },
                    "secretsPermissions": {
                        "value": "[variables('secretsPermissions')]"
                    },
                    "keysPermissions": {
                        "value": "[variables('keysPermissions')]"
                    },
                    "certificatesPermissions": {
                        "value": "[variables('certificatesPermissions')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase1-MetaHostSetup",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines',variables('meta_vm_name'))]",
                "[resourceId('Microsoft.Resources/deployments','MetaAccessPolicy')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('meta_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('SAS Application Name'),' ',parameters('sasdepot folder'),' ',parameters('file share name'),' ',parameters('storage account name'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('SAS Server license file'),' ','meta',' ',parameters('_artifactsLocation'),' ',variables('key_vault_secretname_stgacc'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('sasapp_startup_script_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase2-MetaInstall",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines',variables('meta_vm_name'))]",
                "[resourceId('Microsoft.Resources/deployments','Phase1-MetaHostSetup')]",
                "[resourceId('Microsoft.Resources/deployments','Phase1-AnsibleHostSetup')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('meta_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail;','./meta_install.sh 2>&1 | tee /var/log/sas/install/meta_install.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('meta_install_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase3-MetaConfig",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines',variables('meta_vm_name'))]",
                "[resourceId('Microsoft.Resources/deployments','Phase2-MetaInstall')]",
                "[resourceId('Microsoft.Resources/deployments','Phase2-AnsibleSSLCopy')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('meta_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail;','./meta_config.sh 2>&1 | tee /var/log/sas/install/meta_config.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('meta_config_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "name": "[variables('compute_nw_interface')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('compute_nw_sg'))]",
                "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet_name'), variables('vnet_pvt_subnt'))]"
                            },
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "enableAcceleratedNetworking": true,
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('compute_nw_sg'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "[variables('compute_vm_name')]",
            "location": "[parameters('location')]",
            "tags":"[variables('sas94vm_tags')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('compute_nw_interface'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnostic_storagegroup_name'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('SAS94 Compute VM Size')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "RedHat",
                        "offer": "RHEL",
                        "sku": "7.7",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "[concat(variables('compute_vm_name'),'-osdisk')]",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "diskSizeGB": "[variables('sas_osdisk_size')]"
                    },
                    "dataDisks": [
                        {
                            "name": "[concat(variables('compute_vm_name'),'-opt-sas')]",
                            "diskSizeGB": "[variables('sas_opt_sas_disk_size')]",
                            "lun": 0,
                            "createOption": "Empty"
                        },
                        {
                            "name": "[concat(variables('compute_vm_name'),'-sasdata')]",
                            "diskSizeGB": "[parameters('SAS94 Data Storage')]",
                            "lun": 1,
                            "createOption": "Empty"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('compute_vm_name')]",
                    "adminUsername": "[variables('primary_user_name')]",
                    "customData": "[base64(variables('custom_data_sas'))]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', variables('primary_user_name'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('SSHPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('compute_nw_interface'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
                    }
                },
                "proximityPlacementGroup": {
                    "id": "[resourceId('Microsoft.Compute/proximityPlacementGroups',variables('ppg_name'))]"
                }
            },
            "resources": []
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "ComputeRoleAssignment",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('compute_vm_name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('role_assignment_template')]"
                },
                "parameters": {
                    "roleAssignmentName": {
                        "value": "[guid('compute',resourceGroup().id)]"
                    },
                    "roleDefinitionID": {
                        "value": "[variables('reader_role')]"
                    },
                    "principalId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('compute_vm_name')),'2019-07-01','Full').identity.principalId]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "ComputeAccessPolicy",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('compute_vm_name'))]",
                "[resourceID('Microsoft.Resources/deployments','MetaAccessPolicy')]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('access_policy_template')]"
                },
                "parameters": {
                    "keyVaultName": {
                        "value": "[variables('key_vault_name')]"
                    },
                    "tenantId": {
                        "value": "[variables('tenantId')]"
                    },
                    "objectId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('compute_vm_name')),'2019-12-01', 'Full').identity.principalId]"
                    },
                    "secretsPermissions": {
                        "value": "[variables('secretsPermissions')]"
                    },
                    "keysPermissions": {
                        "value": "[variables('keysPermissions')]"
                    },
                    "certificatesPermissions": {
                        "value": "[variables('certificatesPermissions')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase1-ComputeHostSetup",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('compute_vm_name'))]",
                "[resourceId('Microsoft.Resources/deployments','ComputeAccessPolicy')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('compute_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('SAS Application Name'),' ',parameters('sasdepot folder'),' ',parameters('file share name'),' ',parameters('storage account name'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('SAS Server license file'),' ','compute',' ',parameters('_artifactsLocation'),' ',variables('key_vault_secretname_stgacc'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('sasapp_startup_script_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase2-ComputeInstall",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines',variables('compute_vm_name'))]",
                "[resourceId('Microsoft.Resources/deployments','Phase1-ComputeHostSetup')]",
                "[resourceId('Microsoft.Resources/deployments','Phase1-AnsibleHostSetup')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('compute_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail;','./compute_install.sh 2>&1 | tee /var/log/sas/install/compute_install.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('compute_install_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase3-ComputeConfig",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments','Phase2-ComputeInstall')]",
                "[resourceId('Microsoft.Resources/deployments','Phase3-MetaConfig')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('compute_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail;','./compute_config.sh 2>&1 | tee /var/log/sas/install/compute_config.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('compute_config_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "name": "[variables('mid_nw_interface')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mid_nw_sg'))]",
                "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet_name'), variables('vnet_pvt_subnt'))]"
                            },
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "enableAcceleratedNetworking": true,
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mid_nw_sg'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "[variables('mid_vm_name')]",
            "location": "[parameters('location')]",
            "tags":"[variables('sas94vm_tags')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('mid_nw_interface'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnostic_storagegroup_name'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('SAS94 Mid VM Size')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "RedHat",
                        "offer": "RHEL",
                        "sku": "7.7",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "[concat(variables('mid_vm_name'),'-osdisk')]",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "diskSizeGB": "[variables('sas_osdisk_size')]"
                    },
                    "dataDisks": [
                        {
                            "name": "[concat(variables('mid_vm_name'),'-opt-sas')]",
                            "diskSizeGB": "[variables('sas_opt_sas_disk_size')]",
                            "lun": 0,
                            "createOption": "Empty"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('mid_vm_name')]",
                    "adminUsername": "[variables('primary_user_name')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', variables('primary_user_name'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('SSHPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('mid_nw_interface'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
                    }
                },
                "proximityPlacementGroup": {
                    "id": "[resourceId('Microsoft.Compute/proximityPlacementGroups',variables('ppg_name'))]"
                }
            },
            "resources": []
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "MidRoleAssignment",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('mid_vm_name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('role_assignment_template')]"
                },
                "parameters": {
                    "roleAssignmentName": {
                        "value": "[guid('mid',resourceGroup().id)]"
                    },
                    "roleDefinitionID": {
                        "value": "[variables('reader_role')]"
                    },
                    "principalId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('mid_vm_name')),'2019-07-01','Full').identity.principalId]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "MidAccessPolicy",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('mid_vm_name'))]",
                "[resourceID('Microsoft.Resources/deployments','ComputeAccessPolicy')]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('access_policy_template')]"
                },
                "parameters": {
                    "keyVaultName": {
                        "value": "[variables('key_vault_name')]"
                    },
                    "tenantId": {
                        "value": "[variables('tenantId')]"
                    },
                    "objectId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('mid_vm_name')),'2019-12-01', 'Full').identity.principalId]"
                    },
                    "secretsPermissions": {
                        "value": "[variables('secretsPermissions')]"
                    },
                    "keysPermissions": {
                        "value": "[variables('keysPermissions')]"
                    },
                    "certificatesPermissions": {
                        "value": "[variables('certificatesPermissions')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase1-MidHostSetup",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('mid_vm_name'))]",
                "[resourceId('Microsoft.Resources/deployments','MidAccessPolicy')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('mid_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('SAS Application Name'),' ',parameters('sasdepot folder'),' ',parameters('file share name'),' ',parameters('storage account name'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('SAS Server license file'),' ','mid',' ',parameters('_artifactsLocation'),' ',variables('key_vault_secretname_stgacc'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('sasapp_startup_script_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase2-MidInstall",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines',variables('mid_vm_name'))]",
                "[resourceId('Microsoft.Resources/deployments','Phase1-MidHostSetup')]",
                "[resourceId('Microsoft.Resources/deployments','Phase1-AnsibleHostSetup')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('mid_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail;','./mid_install.sh 2>&1 | tee /var/log/sas/install/mid-install.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('mid_install_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase3-MidConfig",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines',variables('mid_vm_name'))]",
                "[resourceId('Microsoft.Resources/deployments','Phase2-MidInstall')]",
                "[resourceId('Microsoft.Resources/deployments','Phase3-ComputeConfig')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('mid_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail;','./mid_config.sh 2>&1 | tee /var/log/sas/install/mid_config.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('mid_config_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "name": "[variables('microservices_nw_interface')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('microservices_nw_sg'))]",
                "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet_name'), variables('vnet_viya_pvt_subnt'))]"
                            },
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "enableAcceleratedNetworking": true,
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('microservices_nw_sg'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "[variables('microservices_vm_name')]",
            "tags":"[variables('sasviyavm_tags')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('microservices_nw_interface'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnostic_storagegroup_name'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('Viya Microservices VM Size')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "RedHat",
                        "offer": "RHEL",
                        "sku": "7.7",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "[concat(variables('microservices_vm_name'),'-osdisk')]",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "diskSizeGB": "[variables('sas_osdisk_size')]"
                    },
                    "dataDisks": [
                        {
                            "name": "[concat(variables('microservices_vm_name'),'-opt-sas')]",
                            "diskSizeGB": "[variables('sas_opt_sas_disk_size')]",
                            "lun": 0,
                            "createOption": "Empty"
                        },
                        {
                            "name": "[concat(variables('microservices_vm_name'),'-sasbackup')]",
                            "diskSizeGB": "[variables('sas_viya_backup_size')]",
                            "lun": 1,
                            "createOption": "Empty"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('microservices_vm_name')]",
                    "adminUsername": "[variables('primary_user_name')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', variables('primary_user_name'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('SSHPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('microservices_nw_interface'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
                    }
                },
                "proximityPlacementGroup": {
                    "id": "[resourceId('Microsoft.Compute/proximityPlacementGroups',variables('ppg_name'))]"
                }
            },
            "resources": []
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "MicroServicesRoleAssignment",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('microservices_vm_name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('role_assignment_template')]"
                },
                "parameters": {
                    "roleAssignmentName": {
                        "value": "[guid('microservices',resourceGroup().id)]"
                    },
                    "roleDefinitionID": {
                        "value": "[variables('reader_role')]"
                    },
                    "principalId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('microservices_vm_name')),'2019-07-01','Full').identity.principalId]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "MicroServicesAccessPolicy",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('microservices_vm_name'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name'))]",
                "[resourceID('Microsoft.Resources/deployments','MidAccessPolicy')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('access_policy_template')]"
                },
                "parameters": {
                    "keyVaultName": {
                        "value": "[variables('key_vault_name')]"
                    },
                    "tenantId": {
                        "value": "[variables('tenantId')]"
                    },
                    "objectId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('microservices_vm_name')),'2019-12-01', 'Full').identity.principalId]"
                    },
                    "secretsPermissions": {
                        "value": "[variables('secretsPermissions')]"
                    },
                    "keysPermissions": {
                        "value": "[variables('keysPermissions')]"
                    },
                    "certificatesPermissions": {
                        "value": "[variables('certificatesPermissions')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase1-MicroServicesHostSetup",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('microservices_vm_name'))]",
                "[resourceId('Microsoft.Resources/deployments','MicroServicesAccessPolicy')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('microservices_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storage account name'),' ',parameters('file share name'),' ',parameters('viyarepo folder'),' ',parameters('SAS Application Name'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('Number Of Viya CAS Nodes'),' ',parameters('_artifactsLocation'),' ',variables('key_vault_secretname_stgacc'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('viya_startup_script_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase2-MicroServicesViyaARK",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'Phase1-MicroServicesHostSetup')]",
                "[resourceId('Microsoft.Resources/deployments', 'Phase1-AnsibleHostSetup')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('microservices_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail;','./viya_ark.sh 2>&1 | tee /var/log/sas/install/runPhase2_viyaark.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('viya_ark_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "name": "[variables('spre_nw_interface')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('spre_nw_sg'))]",
                "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet_name'), variables('vnet_viya_pvt_subnt'))]"
                            },
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "enableAcceleratedNetworking": true,
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('spre_nw_sg'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "[variables('spre_vm_name')]",
            "location": "[parameters('location')]",
            "tags":"[variables('sasviyavm_tags')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('spre_nw_interface'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnostic_storagegroup_name'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('Viya SPRE VM Size')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "RedHat",
                        "offer": "RHEL",
                        "sku": "7.7",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "[concat(variables('spre_vm_name'),'-osdisk')]",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "diskSizeGB": "[variables('sas_osdisk_size')]"
                    },
                    "dataDisks": [
                        {
                            "name": "[concat(variables('spre_vm_name'),'-opt-sas')]",
                            "diskSizeGB": "[variables('sas_opt_sas_disk_size')]",
                            "lun": 0,
                            "createOption": "Empty"
                        },
                        {
                            "name": "[concat(variables('spre_vm_name'),'-sasbackup')]",
                            "diskSizeGB": "[variables('sas_viya_backup_size')]",
                            "lun": 1,
                            "createOption": "Empty"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('spre_vm_name')]",
                    "adminUsername": "[variables('primary_user_name')]",
                    "customData": "[base64(variables('custom_data_sas'))]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', variables('primary_user_name'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('SSHPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('spre_nw_interface'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
                    }
                },
                "proximityPlacementGroup": {
                    "id": "[resourceId('Microsoft.Compute/proximityPlacementGroups',variables('ppg_name'))]"
                }
            },
            "resources": []
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "SpreRoleAssignment",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('spre_vm_name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('role_assignment_template')]"
                },
                "parameters": {
                    "roleAssignmentName": {
                        "value": "[guid('spre',resourceGroup().id)]"
                    },
                    "roleDefinitionID": {
                        "value": "[variables('reader_role')]"
                    },
                    "principalId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('spre_vm_name')),'2019-07-01','Full').identity.principalId]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "SpreAccessPolicy",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('spre_vm_name'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name'))]",
                "[resourceID('Microsoft.Resources/deployments','CAScontrollerAccessPolicy')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('access_policy_template')]"
                },
                "parameters": {
                    "keyVaultName": {
                        "value": "[variables('key_vault_name')]"
                    },
                    "tenantId": {
                        "value": "[variables('tenantId')]"
                    },
                    "objectId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('spre_vm_name')),'2019-12-01', 'Full').identity.principalId]"
                    },
                    "secretsPermissions": {
                        "value": "[variables('secretsPermissions')]"
                    },
                    "keysPermissions": {
                        "value": "[variables('keysPermissions')]"
                    },
                    "certificatesPermissions": {
                        "value": "[variables('certificatesPermissions')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase1-SpreHostSetup",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines',  variables('spre_vm_name'))]",
                "[resourceId('Microsoft.Resources/deployments','SpreAccessPolicy')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('spre_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storage account name'),' ',parameters('file share name'),' ',parameters('file share name'),' ',parameters('SAS Application Name'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('Number Of Viya CAS Nodes'),' ',parameters('_artifactsLocation'),' ',variables('key_vault_secretname_stgacc'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('viya_startup_script_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase2-SpreViyaARK",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments','Phase1-SpreHostSetup')]",
                "[resourceId('Microsoft.Resources/deployments', 'Phase1-AnsibleHostSetup')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('spre_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail;','./viya_ark.sh 2>&1 | tee /var/log/sas/install/runPhase2_viyaark.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('viya_ark_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "name": "[variables('cascontroller_nw_interface')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('cascontroller_nw_sg'))]",
                "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet_name'), variables('vnet_viya_pvt_subnt'))]"
                            },
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "enableAcceleratedNetworking": true,
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('cascontroller_nw_sg'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "[variables('Cascontroller_vm_name')]",
            "location": "[parameters('location')]",
            "tags":"[variables('sasviyavm_tags')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('cascontroller_nw_interface'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnostic_storagegroup_name'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('Viya CAS Controller VM Size')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "RedHat",
                        "offer": "RHEL",
                        "sku": "7.7",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "[concat(variables('cascontroller_vm_name'),'-osdisk')]",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "diskSizeGB": "[variables('sas_osdisk_size')]"
                    },
                    "dataDisks": [
                        {
                            "name": "[concat(variables('cascontroller_vm_name'),'-opt-sas')]",
                            "diskSizeGB": "[variables('sas_opt_sas_disk_size')]",
                            "lun": 0,
                            "createOption": "Empty"
                        },
                        {
                            "name": "[concat(variables('cascontroller_vm_name'),'-sasbackup')]",
                            "diskSizeGB": "[variables('sas_viya_backup_size')]",
                            "lun": 1,
                            "createOption": "Empty"
                        },
                        {
                            "name": "[concat(variables('cascontroller_vm_name'),'-sasdata')]",
                            "diskSizeGB": "[parameters('SAS Viya Data Storage')]",
                            "lun": 2,
                            "createOption": "Empty"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('Cascontroller_vm_name')]",
                    "adminUsername": "[variables('primary_user_name')]",
                    "customData": "[base64(variables('custom_data_cas'))]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', variables('primary_user_name'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('SSHPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('cascontroller_nw_interface'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
                    }
                },
                "proximityPlacementGroup": {
                    "id": "[resourceId('Microsoft.Compute/proximityPlacementGroups',variables('ppg_name'))]"
                }
            },
            "resources": []
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "CAScontrollerRoleAssignment",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('Cascontroller_vm_name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('role_assignment_template')]"
                },
                "parameters": {
                    "roleAssignmentName": {
                        "value": "[guid('cascontroller',resourceGroup().id)]"
                    },
                    "roleDefinitionID": {
                        "value": "[variables('reader_role')]"
                    },
                    "principalId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('Cascontroller_vm_name')),'2019-07-01','Full').identity.principalId]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "CAScontrollerAccessPolicy",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('Cascontroller_vm_name'))]",
                "[resourceID('Microsoft.Resources/deployments','MicroServicesAccessPolicy')]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('access_policy_template')]"
                },
                "parameters": {
                    "keyVaultName": {
                        "value": "[variables('key_vault_name')]"
                    },
                    "tenantId": {
                        "value": "[variables('tenantId')]"
                    },
                    "objectId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('Cascontroller_vm_name')),'2019-12-01', 'Full').identity.principalId]"
                    },
                    "secretsPermissions": {
                        "value": "[variables('secretsPermissions')]"
                    },
                    "keysPermissions": {
                        "value": "[variables('keysPermissions')]"
                    },
                    "certificatesPermissions": {
                        "value": "[variables('certificatesPermissions')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase1-CASControllerHostSetup",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines',  variables('Cascontroller_vm_name'))]",
                "[resourceId('Microsoft.Resources/deployments','CAScontrollerAccessPolicy')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('Cascontroller_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storage account name'),' ',parameters('file share name'),' ',parameters('file share name'),' ',parameters('SAS Application Name'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('Number Of Viya CAS Nodes'),' ',parameters('_artifactsLocation'),' ',variables('key_vault_secretname_stgacc'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('viya_startup_script_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "Phase2-CASControllerViyaARK",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'Phase1-CASControllerHostSetup')]",
                "[resourceId('Microsoft.Resources/deployments', 'Phase1-AnsibleHostSetup')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[variables('Cascontroller_vm_name')]"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail;','./viya_ark.sh 2>&1 | tee /var/log/sas/install/runPhase2_viyaark.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('viya_ark_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "name": "[concat(parameters('SAS Application Name'),'_',variables('casworker_vm_name'),copyIndex(),'_nic_',variables('resourceGroupUniqueString'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('casworker_nw_sg'))]",
                "[resourceId('Microsoft.Network/virtualNetworks',variables('vnet_name'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet_name'), variables('vnet_viya_pvt_subnt'))]"
                            },
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "enableAcceleratedNetworking": true,
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('casworker_nw_sg'))]"
                }
            },
            "copy": {
                "name": "casworkernicLoop",
                "count": "[parameters('Number Of Viya CAS Nodes')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "[concat(variables('casworker_vm_name'), copyIndex())]",
            "location": "[parameters('location')]",
            "tags":"[variables('sasviyavm_tags')]",
            "dependsOn": [
                "casworkernicLoop"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('Viya CAS Worker VM Size')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "RedHat",
                        "offer": "RHEL",
                        "sku": "7.7",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "[concat(variables('casworker_vm_name'), copyIndex(),'-osdisk')]",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "diskSizeGB": "[variables('sas_osdisk_size')]"
                    },
                    "dataDisks": [
                        {
                            "name": "[concat(variables('casworker_vm_name'), copyIndex(),'-opt-sas')]",
                            "diskSizeGB": "[variables('sas_opt_sas_disk_size')]",
                            "lun": 0,
                            "createOption": "Empty"
                        },
                        {
                            "name": "[concat(variables('casworker_vm_name'), copyIndex(),'-sasbackup')]",
                            "diskSizeGB": "[variables('sas_viya_backup_size')]",
                            "lun": 1,
                            "createOption": "Empty"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[concat(variables('casworker_vm_name'), copyIndex())]",
                    "adminUsername": "[variables('primary_user_name')]",
                    "customData": "[base64(variables('custom_data_cas'))]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', variables('primary_user_name'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('SSHPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('SAS Application Name'),'_',variables('casworker_vm_name'),copyIndex(),'_nic_',variables('resourceGroupUniqueString')))]"
                        }
                    ]
                },
                "proximityPlacementGroup": {
                    "id": "[resourceId('Microsoft.Compute/proximityPlacementGroups',variables('ppg_name'))]"
                }
            },
            "copy": {
                "name": "casworkervmLoop",
                "count": "[parameters('Number Of Viya CAS Nodes')]"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[concat(variables('casworker_vm_name'), copyIndex(),'roleassignment')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('casworker_vm_name'), copyIndex()))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('role_assignment_template')]"
                },
                "parameters": {
                    "roleAssignmentName": {
                        "value": "[guid(concat(variables('casworker_vm_name'), copyIndex()),resourceGroup().id)]"
                    },
                    "roleDefinitionID": {
                        "value": "[variables('reader_role')]"
                    },
                    "principalId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',concat(variables('casworker_vm_name'), copyIndex())),'2019-07-01','Full').identity.principalId]"
                    }
                }
            },
            "copy": {
                "name": "casworkerrolecopy",
                "count": "[parameters('Number Of Viya CAS Nodes')]"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[concat(variables('casworker_vm_name'), copyIndex(),'accesspolicy')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('casworker_vm_name'), copyIndex()))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name'))]",
                "[resourceID('Microsoft.Resources/deployments','SpreAccessPolicy')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('access_policy_template')]"
                },
                "parameters": {
                    "keyVaultName": {
                        "value": "[variables('key_vault_name')]"
                    },
                    "tenantId": {
                        "value": "[variables('tenantId')]"
                    },
                    "objectId": {
                        "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',concat(variables('casworker_vm_name'), copyIndex())),'2019-07-01','Full').identity.principalId]"
                    },
                    "secretsPermissions": {
                        "value": "[variables('secretsPermissions')]"
                    },
                    "keysPermissions": {
                        "value": "[variables('keysPermissions')]"
                    },
                    "certificatesPermissions": {
                        "value": "[variables('certificatesPermissions')]"
                    }
                }
            },
            "copy": {
                "name": "casworkerpolicycopy",
                "count": "[parameters('Number Of Viya CAS Nodes')]",
                "mode": "serial",
                "batchSize": 1
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[concat('Phase1-',variables('casworker_vm_name'), copyIndex(),'Hostsetup')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('casworker_vm_name'), copyIndex()))]",
                "casworkerpolicycopy"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[concat(variables('casworker_vm_name'), copyIndex())]"
                    },
                    "commandToExecute": {
                        "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storage account name'),' ',parameters('file share name'),' ',parameters('file share name'),' ',parameters('SAS Application Name'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('Number Of Viya CAS Nodes'),' ',parameters('_artifactsLocation'),' ',variables('key_vault_secretname_stgacc'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('viya_startup_script_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            },
            "copy": {
                "name": "casworkerextensioncopy",
                "count": "[parameters('Number Of Viya CAS Nodes')]"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[concat('Phase2-',variables('casworker_vm_name'), copyIndex(),'ViyaARK')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', concat('Phase1-',variables('casworker_vm_name'), copyIndex(),'Hostsetup'))]",
                "[resourceId('Microsoft.Resources/deployments', 'Phase1-AnsibleHostSetup')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linux_extension_template')]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[concat(variables('casworker_vm_name'), copyIndex())]"
                    },
                    "commandToExecute": {
                        "value": "[concat('set -o pipefail;','./viya_ark.sh 2>&1 | tee /var/log/sas/install/runPhase2_viyaark.log')]"
                    },
                    "_artifactsLocation": {
                        "value": "[variables('viya_ark_sh')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[variables('_artifactsLocationSasToken')]"
                    }
                }
            },
            "copy": {
                "name": "casworkerviyaarkcopy",
                "count": "[parameters('Number Of Viya CAS Nodes')]"
            }
        }
    ],
    "outputs": {
        "Ansible-JumpHost Server IP": {
            "type": "String",
            "value": "[concat(reference(resourceId('Microsoft.Compute/virtualMachines',variables('ansible_vm_name'))).osProfile.adminUsername,'@',reference(resourceId('Microsoft.Network/publicIPAddresses',variables('ansible_pub_nw_interface'))).IpAddress)]"
        },
        "SAS RDP Server IP": {
            "type": "String",
            "value": "[reference(resourceId('Microsoft.Network/networkInterfaces',variables('rdp_nw_interface'))).ipConfigurations[0].properties.privateIPAddress]"
        },
        "SAS Logon": {
            "type": "String",
            "value": "[concat('https://',parameters('SAS Application Name'),variables('mid_vm_name'),'.',variables('domain_name'),':8343/SASLogon')]"
        },
        "SASStudio MidTier": {
            "type": "String",
            "value": "[concat('https://',parameters('SAS Application Name'),variables('mid_vm_name'),'.',variables('domain_name'),':8343/SASStudio')]"
        },
        "SAS Install User": {
            "type": "String",
            "value": "sasinst"
        },
        "SAS Drive": {
            "type": "String",
            "value": "[concat('https://',parameters('SAS Application Name'),variables('microservices_vm_name'),'.',variables('domain_name'),'/SASDrive')]"
        },
        "SAS Studio": {
            "type": "String",
            "value": "[concat('https://',parameters('SAS Application Name'),variables('microservices_vm_name'),'.',variables('domain_name'),'/SASStudioV')]"
        },
       "SAS Viya Logon": {
            "type": "String",
            "value": "[concat('https://',parameters('SAS Application Name'),variables('microservices_vm_name'),'.',variables('domain_name'),'/SASLogon/reset_password?code=',json(split(reference('Phase6-ViyaPostInstall').outputs.instanceView.value.statuses[0].message, '#SASBOOT#')[1]).SAS_BOOT)]"
        }
    }
}